sizeof(x) 的运算对象 x 是数组的名字，求值结果是整个数组所占空间的大小，等价于对数组中所有的元素各执行一次 sizeof 运算并对所得结果求和。尤其需要注意，sizeof 运算符不会把数组转换成指针来处理。在本例中，x 是一个 int 数组且包含 10 个元素，所以 sizeof(x) 的求值结果是 10 个 int 值所占的内存空间总和。
sizeof(*x) 的运算对象 *x 是一条解引用表达式，此处的 x 既是数组的名称，也表示指向数组首元素的指针，解引用该指针得到指针所指的内容，在本例中是一个 int。所以，sizeof(*x) 在这里等价于 sizeof(int)，即 int 所占的内存空间。
sizeof(x) / sizeof(*x) 可以理解为数组 x 所占的全部空间除以其中一个元素所占的空间，得到的结果应该是数组 x 的元素总数。实际上，因为 C++ 的内置数组并没有定义成员函数 size()，所以通常无法直接得到数组的容量。本题所示的方法是计算得到数组容量的一种常规方法。
sizeof(p) 的运算对象 p 是一个指针，求值结果是指针所占的空间大小。
sizeof(*p) 的运算对象 *p 是指针 p 所指的对象，即 int 变量 x，所以求值结果是 int 值所占的空间大小。